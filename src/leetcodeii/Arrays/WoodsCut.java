package leetcodeii.Arrays;

import leetcodeii.Tracker;

/**
 * Created by Erebus on 3/25/18.
 */
public class WoodsCut implements Tracker {

    /**
     * @param L: Given n pieces of wood with length L[i]
     * @param k: An integer
     * @return: The maximum length of the small pieces
     */
    public int woodCut(int[] L, int k) {
        // write your code here

        long max = 0;
        /**
         * FIXME: key: starts min from 1, get max from woods
         */
        long min = 1;
        long res = 0;
        for(int i : L){
            max = Math.max(max, i);
        }
        while(min<max){
            /**
             *
             * FIXME: by doing this, is very much like to overflow
             * instead, should to min + (max-min)/2, or use a long value
             * */
            long mid = (min + max)/2;
            if(cut(L, (int) mid, k)){
                //increase size
                //FIXME: key, a valid results must be generated by can cut, so "max = mid" case -> break loop -> min or max is not accurate
                res = Math.max(mid, res);
                min = mid+1;
            } else {
                max = mid;
            }
        }
        return (int)res;
    }

    public boolean cut(int [] L, int size, int k){
        int woods = 0;
        for(int ii=0; ii<L.length; ii++ ){
            woods += L[ii]/size;
        }
        //true, have at least k pieces, total = k*size, to reduce piece, increase size
        //false, size too large, cut in less than k pieces. need to decrease size
        return woods >= k;
    }

    public static void main(String [] args){
        WoodsCut w = new WoodsCut();
        int[] ww = {232, 124, 456};

        w.cout(w.woodCut(ww, 7));
    }
}
